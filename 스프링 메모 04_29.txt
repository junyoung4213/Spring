AOP(Aspect Oriented Programming)
: 관심(관점) 지향 프로그래밍
; 관심도 있는 것끼리 별도로 분리한다
; 외부 설정에 의해서 자유롭게 추가삭제

1) 조인포인트(JoinPoint)
 우리의 관심의 대상 메서드들(비즈니스 로직 메서드)
 
2) 포인트컷(PointCut) 
 필터링된 조인포인트(이 메서드에 로그를 삽입하겠다)
 
 <aop:pointcut id="allPointcut" expression="execution(* com.springstudy.biz..*ServiceImpl.*(..))"/>
 
3) 포인트컷 표현식
리턴타입 : * 
패키지경로 : com.springstudy.biz..
클래스명 : *ServiceImpl
클래스명과 메서드를 구분 : .
메서드명 : *
매개변수 : (..))

4) 어드바이스(Advice)
 : 횡단 관심에 해당하는 공통 기능의 코드를 의미
   ex) 로그 메서드(printLogging)
  <bean id="log" class="com.springstudy.biz.common.log.Log4jAdvice"></bean>
  <aop:aspect ref="log">
			<aop:before method="printLogging"
						pointcut-ref="getPointCut" />
  </aop:aspect>
  
5) 어드바이스의 동작시점
 ; before
   after
   after-returning
   after-throwing
   around
   
 6) 애스팩트(Aspect)
   어드바이저(Advisor) : 트랜잭션시
   
   Aspect = PointCut + Advice
   어떤 대상 메서드(PointCut)에 어떤 공통기능(횡단관심)을
   어느 시점에 추가할 것이냐