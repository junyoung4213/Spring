WEB-INF 폴더 내부에 있는 것은 클라이언트가 직접 접근할 수 없다.

@ModelAttribute()를 사용해서 JSP에서 사용할 객체의 이름을 지정해 줄 수 있다.

ex) (@ModelAttribute("user") UserVO vo) 이런식으로 파라미터를 넘기면
jsp 파일에서 ${user}로 vo객체에 접근할 수 있음.

method = RequestMethod.GET or POST 로 GET방식의 요청, POST방식의 요청을 
분리해서 대응할 수 있다. @RequestMapping의 두번째 인자로 입력해주면 된다. 

Controller의 경우에는 중앙집권(한개의 컨트롤러에 다수 메서드)과 
지방분권(기능별로 여러개의 컨트롤러 생성)방식이 있다.

@RequestParam 어노테이션을 사용하면 jsp에서 request에 담아서
보내주는 정보를 받아서 사용할 수 있다.

@ModelAttribute의 기능
	 * 1) Command객체를 view에 전달할 때 이름 변경시 사용
	 * 2) view에서 사용할 데이터 객체를 만들어서 전달할 때 사용
	 * 	 (@RequestMapping 어노테이션보다 먼저 호출된다. 
	 * 	    자동으로 Model에 저장된다.
	 * 	    스프링은 Model에 저장된 conditionMap을 꺼내서
	 * 	  request에 저장해서 jsp에 전달한다)

매개변수로 전달된 model 객체에 값을 넣으면
	 * 스프링은 이 메서드가 리턴된 후 model에서 값을 꺼내서
	 * request에 저장한다.
	 * ModelAndView를 사용하는 것과 동일하다.


/* updateBoard호출시 vo에는 클라이언트가 전송한 데이터만
 * 주입되어 있고 나머지는 모두 null/0으로 저장되어 있다.
 * 
 * 만약 더 많은 항목을 update하려고 sql을 작성했는데
 * 클라이언트가 가변적으로 데이터를 보낸다면
 * 어떨 때는 모두 값이 존재하지만 어떤 때는 비어있는 값이 
 * 존재하게 된다.
 * 
 * 이럴 때 비어있는 값을 기존의 값으로 채워줘야하고
 * 새로운 값만 갱신해서 update해야 한다.
 * 
 * 이럴 때 @SessionAttributes를 사용한다.
 * 
 * 먼저 1번 항목은 getBoard()메서드가 실행되면 
 * 1차적으로 Model에 "board"라는 이름으로 BoardVO객체가 저장된다.
 * 
 * 2번에서 이 때 @SessionAttributes("board") 설정이 되어있으면
 * Model에 "board"를 찾아서 session공간에서 "board"를 저장하게 된다.
 * 
 * 3번 @ModelAttribute("board") 설정을 해석하여
 * session에 "board"라는 객체가 있는지 확인한다.
 * 있으면 해당 객체를 꺼내서 vo에 할당한다.
 * 그리고 사용자가 새로 보내온 title, content값만 새롭게 
 * 할당된다.
 * 그러므로 사용자가 보내지 않은 나머지 데이터는 기존 데이터를
 * 가진 상태가 된다.
*/

비즈니스 로직은 Service 계층을 통해서 DAO에 접근하는 것이 좋다.

그렇게 하면 유연성을 확보할 수 있다.

Service에 웹 소켓을 이용한 다른 시스템을 붙일 수도 있기 때문이다.